# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  tags:
    include:
    - '*'
  branches:  
    include:
    - '*'

pool: Default

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'azurespringacr'
  imageRepository: 'petclinic'
  containerRegistry: 'evparkdevopsacr.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'azurespringacr1580782c-auth'
  # Maven Caching
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
     name: Default 
      
    steps:
    # - task: AzureKeyVault@1
    #   inputs:
    #     azureSubscription: 'keyvault'                    ## YOUR_SERVICE_CONNECTION_NAME
    #     KeyVaultName: 'andy-cert-keyvault'                         ## YOUR_KEY_VAULT_NAME
    #     SecretsFilter: 'postgres-url, postgres-user, postgres-pass, sonar-url, sonar-token'                      ## YOUR_SECRET_NAME. Default value: *
    #     RunAsPreJob: false                                   ## Make the secret(s) available to the whole job

    - task: Cache@2
      displayName: Cache Maven local repo  
      inputs:
        key: 'maven | "$(Agent.OS)" | **/pom.xml'
        restoreKeys: |
          maven | "$(Agent.OS)"
          maven
        path: $(MAVEN_CACHE_FOLDER) 

    - task: Maven@3
      displayName: Maven Build
      inputs:
        mavenPomFile: 'Application/pom.xml'
        publishJUnitResults: true
        codeCoverageTool: 'jacoco'
        codeCoverageClassFilesDirectories:  'Application/target/classes, Application/target/testClasses'
        codeCoverageSourceDirectories: 'Application/src/java, Application/src/test'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: 1.11
        mavenVersionOption: 'Default'
        mavenOptions: '$(MAVEN_OPTS)'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        options: 
        goals: "-B verify"
 
    # - task: Maven@3
    #   displayName: Static Analysis on SonarQube
    #   inputs:     
    #     mavenPomFile: 'Application/pom.xml'
    #     mavenOptions: '$(MAVEN_OPTS)'
    #     goals: "-B sonar:sonar"
    #     options: "-Dsonar.projectKey=azure-spring -Dsonar.host.url=$(sonar-url) -Dsonar.login=$(sonar-token)"
    
    - task: Docker@2
      displayName: Build and push an image to container registry
      # condition: OR(contains(variables['build.sourceBranch'], 'RC'), contains(variables['build.sourceBranch'], 'RELEASE'))
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      condition: OR(contains(variables['build.sourceBranch'], 'RC'), contains(variables['build.sourceBranch'], 'RELEASE'))
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: OR(contains(variables['build.sourceBranch'], 'RC'), contains(variables['build.sourceBranch'], 'RELEASE'))

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
     name: Default 
    environment: 'stage-skr.stg-workshop1'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/secretproviderclass.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

# - stage: Deploy_prod
#   displayName: Deploy production
#   dependsOn: Build
#   condition: contains(variables['build.sourceBranch'], 'RELEASE')

#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'prod.prodd82'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: KubernetesManifest@0
#             displayName: Create imagePullSecret
#             inputs:
#               action: createSecret
#               secretName: $(imagePullSecret)
#               dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

#           - task: KubernetesManifest@0
#             displayName: Deploy to Kubernetes cluster
#             inputs:
#               action: deploy
#               manifests: |
#                 $(Pipeline.Workspace)/manifests/deployment.yml
#                 $(Pipeline.Workspace)/manifests/secretproviderclass.yml
#                 $(Pipeline.Workspace)/manifests/service.yml
#               imagePullSecrets: |
#                 $(imagePullSecret)
#               containers: |
#                 $(containerRegistry)/$(imageRepository):$(tag)                

